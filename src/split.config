//分箱
    val binning = new Binning()
    if (!(null==format || format.length == 0)) {
      //获取输入数据（DataFrame格式）的属性名称。
      val featureNames = allDataDF.columns
      //分箱时，不进行分箱的属性名称。
      val exclusiveArray = new ArrayBuffer[String]()
      //不对用户ID属性进行分箱。
      exclusiveArray.append(userField)
      //不对标签属性进行分箱。
      exclusiveArray.append(labelField)
      //获取需要分箱的属性名称。
      val featureToBin = FreqItemsTraitWeight.getFeaturesToBin(featureNames, format, exclusiveArray.toArray)
      if (featureToBin.length > 0) {
        //对inputDF中的数据进行分箱，分箱后的数据仍保存在inputDF中，替换原数据集。
        allDataDF = binning.binning(sqlContext, allDataDF, featureToBin, binNum, userField,
          labelField, indexCategoryFlag = false)
        logInfo(s"Binning for columns [${featureToBin.mkString(delimiter)}] complete")
      } else {
        logInfo(s"No column has to be binned, skip the binning step")
      }
    } else {
      logInfo(s"No schema format info is provided, skip the binning step")
    }

    //seedUsers -> seedDF, testUsers -> nonSeedDF
    //拆出种子用户和未知用户集合，并去掉label
    val seedUsers = allDataDF.filter(allDataDF(labelField).equalTo(seedValue)).drop(labelField)
    val testUsers = allDataDF.filter(allDataDF(labelField).equalTo(nonSeedValue)).drop(labelField)
    //获取用户ID属性在输入数据的属性名称集合中的索引（顺序）。
    val userIDIndex = seedUsers.schema.fieldIndex(userField)
    //获取输入数据中排除用户ID属性后的其他属性的名称数组。
    val featureNameArray = seedUsers.columns.filter(x => {!x.equals(userField)})
    logInfo(s"Separate seed users and unknown users complete")

    //对种子用户进行抽样
    var transactions = seedUsers.rdd
    if (math.abs(seedSample - 1.0) > 0.000001) {
      transactions = transactions.sample(withReplacement = false, seedSample, Random.nextLong())
      logInfo(s"Take sample from seed users complete")
    }
    //获取抽样出的种子用户的数量
    val transactionNum = transactions.count
    logInfo(s"Number of seed users: [$transactionNum]")
    //获取非种子的数量
    val testTransactionNum = testUsers.rdd.count
    logInfo(s"Number of candidate users: [$testTransactionNum]")

    //对全量样本进行抽样，抽样数量为种子抽样数量的totalToSeedMultiples倍
    val addDataNum = allDataDF.count
    val trainTransactions = allDataDF.drop(labelField).rdd.sample(withReplacement = false, Math.min(1.0,transactionNum *
      totalToSeedMultiples/addDataNum), Random.nextLong())
    val trainTransactionsNum = trainTransactions.count

    //对抽样出的种子用户RDD的格式进行处理：将userid抽出，转为(userid,featureIndex:featureValue)
    var seedTransactions = transactions.map(x => {
      val temp = x.toSeq.toArray.map(_.toString)
      val userid = temp(userIDIndex)
      val buffer = new ArrayBuffer[String]()
      for (ii <- temp.indices) {
        if (ii != userIDIndex) {
          buffer.append(temp(ii))
        }
      }
      val features = buffer.toArray.zipWithIndex.map(y => {
        featureNameArray(y._2).concat(":").concat(y._1)
      })
      (userid, features)
    })
    logInfo(s"Generate transactions for seed users complete")

    //对非种子用户RDD的格式进行处理：将userid抽出，转为(userid,featureIndex:featureValue)
    var testTransactions = testUsers.rdd.map(x => {
      val temp = x.toSeq.toArray.map(_.toString)
      val userid = temp(userIDIndex)
      val buffer = new ArrayBuffer[String]()
      for (ii <- temp.indices) {
        if (ii != userIDIndex) {
          buffer.append(temp(ii))
        }
      }
      val features = buffer.toArray.zipWithIndex.map(y => {
        featureNameArray(y._2).concat(":").concat(y._1)
      })
      (userid, features)
    })
    logInfo(s"Generate transactions for candidate users complete")

    //对从全量样本中抽出的样本集进行处理：将userid抽出，转为(userid,featureIndex:featureValue)
    var totalTransactions = trainTransactions.map(x => {
      val temp = x.toSeq.toArray.map(_.toString)
      val userid = temp(userIDIndex)
      val buffer = new ArrayBuffer[String]()
      for (ii <- temp.indices) {
        if (ii != userIDIndex) {
          buffer.append(temp(ii))
        }
      }
      val features = buffer.toArray.zipWithIndex.map(y => {
        featureNameArray(y._2).concat(":").concat(y._1)
      })
      (userid, features)
    })
    logInfo(s"Generate transactions for train users complete")

    //为featureIndex:featureValue建立索引，提升性能
    var broadcastItemToIndex = Map.empty[String, String]
    var broadcastIndexToItem = Map.empty[String, String]
    //indexFeatures标记是否需要对特征建立索引。值为1，建立；反之，不建立。
    if (indexFeatures) {
      //分别提取抽出的种子、所有非种子、抽出的全量数据中的featureIndex:featureValue部分。
      val seedFeatures = seedTransactions.map(_._2)
      val testFeatures = testTransactions.map(_._2)
      val totalFeatures = totalTransactions.map(_._2)

      //合并提取抽出的种子、所有非种子、抽出的全量数据中的featureIndex:featureValue部分,并对该部分去重、索引。
      val map = seedFeatures.union(testFeatures).union(totalFeatures).flatMap(x => x).distinct.zipWithIndex
      //广播获取到的合并集
      val broadcastMap = sc.broadcast(map.collect).value
      //(featureIndex:featureValue,索引)生成Map
      broadcastItemToIndex = broadcastMap.map(x => (x._1, x._2.toString)).toMap
      //(索引, featureIndex:featureValue)生成Map
      broadcastIndexToItem = broadcastMap.map(x => (x._2.toString, x._1)).toMap
      //根据(featureIndex:featureValue,索引)格式的Map（broadcastItemToIndex）对抽样出的种子用户集中的
      // Array(featureIndex1:featureValue1,featureIndex2:featureValue2,……)部分进行索引。
      seedTransactions = seedTransactions.map(x => {
        (x._1, x._2.map(y => broadcastItemToIndex.getOrElse(y, "")))
      })
      //根据(featureIndex:featureValue,索引)格式的Map（broadcastItemToIndex）对所有非种子用户集中的
      // Array(featureIndex1:featureValue1,featureIndex2:featureValue2,……)部分进行索引。
      testTransactions = testTransactions.map(x => {
        (x._1, x._2.map(y => broadcastItemToIndex.getOrElse(y, "")))
      })
      //根据(featureIndex:featureValue,索引)格式的Map（broadcastItemToIndex）对抽样出的全量数据中的
      // Array(featureIndex1:featureValue1,featureIndex2:featureValue2,……)部分进行索引。
      totalTransactions = totalTransactions.map(x => {
        (x._1, x._2.map(y => broadcastItemToIndex.getOrElse(y, "")))
      })
    }

    //生成种子用户集（seedTransactions）、全量数据集（totalTransactions）的频繁项，以及生成二者时的最小支持度
    val (freqItemsetsFromSeed, freqItemsetsFromTotal, defaultSupport) = FreqItemsTraitWeight.getFreqItemsetsOfUsers(
      seedTransactions, totalTransactions, minSupport, numPartition, filterSingleItem, minPatternNum, maxIterationNum,
      maxPatternNum)

    //根据种子频繁项集和全量样本频繁项集，获得最终频繁项集，并计算最终频繁项集各频繁项的权重。
    //根据种子频繁项规则、全量数据集频繁项规则的支持度，计算生成的频繁项规则的权重。
    var freqItemsets = FreqItemsTraitWeight.freqItemsWeights(freqItemsetsFromSeed, freqItemsetsFromTotal,
      transactionNum, trainTransactionsNum, delimiter, defaultSupport)

    //截取固定数量的pattern作为特征
    if (freqItemsets.count() >= maxPatternNum && maxPatternNum > 0) {
      //截取生成的频繁项，保留maxPatternNum个
      freqItemsets = freqItemsets.zipWithIndex.filter(_._2 <= maxPatternNum - 1).map(_._1)
      logInfo(s"Keep frequent item sets with num: [${freqItemsets.count}]")
    }

    //广播所有的频繁项
    val broadcastfreqItemsets = sc.broadcast(freqItemsets.collect).value

    //对未知用户进行频繁项匹配，并按需求保存满足的频繁项。输入参数为非种子用户集、计算过权重的频繁项规则、数据中使用的分隔符。
    val predictResults = FreqItemsTraitWeight.predictWithPatterns(testTransactions, broadcastfreqItemsets,
      delimiter) //频繁度不归一化，权重按频繁项长度递增
    logInfo(s"Predict candidate users complete")

    //对用户按打分排序
    val sortedPredictResult = predictResults.sortBy(_._2, ascending = false)
    //对分数归一化
    val sortedScores = sortedPredictResult.map(_._2)
    val maxScore = sortedScores.first
    val minScore = sortedScores.takeOrdered(1).head
    val normSortedPredictResult = if (Math.abs(maxScore-minScore)>=0.001) {
      sortedPredictResult.map(x => {
        (x._1,x._2, ((x._2 - minScore) / (maxScore - minScore)).formatted("%.3f"))
      })
    } else {
      sortedPredictResult.map(x =>(x._1,x._2, 1.0))
    }
    //取前k个输出
    val outputResult = if (k > 0) {
      logInfo(s"Take top [$k] candidate users")
      normSortedPredictResult.zipWithIndex.filter(_._2 <= k - 1).map(_._1)
    } else {
      normSortedPredictResult
    }
    val sortedUsersNum = outputResult.count
    logInfo(s"Sort candidate users with scores, candidate users number: [$sortedUsersNum]")
